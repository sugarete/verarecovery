module serpent_key_schedule (
    input wire [255:0] i_key,
    input wire [5:0] i_subkey_index,
    output wire o_subkey_ready,
    output wire [127:0] o_subkey_out
);

    reg [31:0] w [0:139];  // Intermediate values for key schedule
    reg [127:0] subkeys [0:32];  // Array to hold the subkeys
    integer i;

    // S-box function
    function [31:0] apply_sbox;
        input [31:0] word;
        input [2:0] sbox_index;
        reg [3:0] sbox_output;
        integer j;
        begin
            for (j = 0; j < 8; j = j + 1) begin
                case (sbox_index)
                    3'b000: sbox_output = Sbox0(word[j*4 +: 4]);
                    3'b001: sbox_output = Sbox1(word[j*4 +: 4]);
                    3'b010: sbox_output = Sbox2(word[j*4 +: 4]);
                    3'b011: sbox_output = Sbox3(word[j*4 +: 4]);
                    3'b100: sbox_output = Sbox4(word[j*4 +: 4]);
                    3'b101: sbox_output = Sbox5(word[j*4 +: 4]);
                    3'b110: sbox_output = Sbox6(word[j*4 +: 4]);
                    3'b111: sbox_output = Sbox7(word[j*4 +: 4]);
                endcase
                apply_sbox[j*4 +: 4] = sbox_output;
            end
        end
    endfunction

    // Rotate Left Function
    function [31:0] ROL;
        input [31:0] data_in;
        input [4:0] amount;
        begin
            ROL = (data_in << amount) | (data_in >> (32 - amount));
        end
    endfunction

    // Initial key expansion
    always @(i_key) begin
        o_subkey_ready = 1'b0;  // Signal that subkeys are not ready
        // Copy the original key into the first eight 32-bit words, w[0] to w[7]
        w[0] = i_key[255:224];
        w[1] = i_key[223:192];
        w[2] = i_key[191:160];
        w[3] = i_key[159:128];
        w[4] = i_key[127:96];
        w[5] = i_key[95:64];
        w[6] = i_key[63:32];
        w[7] = i_key[31:0];

        // Generate the remaining intermediate values w[8] to w[139]
        for (i = 8; i < 140; i = i + 1) begin
            w[i] = ROL((w[i-8] ^ w[i-5] ^ w[i-3] ^ w[i-1] ^ 32'h9e3779b9 ^ (i-8)), 11);
        end

        // Generate the subkeys from the intermediate values
        for (i = 0; i < 33; i = i + 1) begin
            subkeys[i] = {apply_sbox(w[4*i + 8], 3'b000), apply_sbox(w[4*i + 9], 3'b001),
                          apply_sbox(w[4*i + 10], 3'b010), apply_sbox(w[4*i + 11], 3'b011)};
        end
        o_subkey_ready = 1'b1;  // Signal that subkeys are ready
    end

    // Output the current subkey
    assign subkey_out = subkeys[subkey_index];

    // S-box definitions
    function [3:0] Sbox;
        input [3:0] data_in;
        input [2:0] sbox_index;
        begin
            case (sbox_index)
                3'b000: Sbox = Sbox0(data_in);
                3'b001: Sbox = Sbox1(data_in);
                3'b010: Sbox = Sbox2(data_in);
                3'b011: Sbox = Sbox3(data_in);
                3'b100: Sbox = Sbox4(data_in);
                3'b101: Sbox = Sbox5(data_in);
                3'b110: Sbox = Sbox6(data_in);
                3'b111: Sbox = Sbox7(data_in);
                default: Sbox = 4'b0000;
            endcase
        end
    endfunction

    // 3 8 15 1 10 6 5 11 14 13 4 2 7 0 9 12
    function [3:0] Sbox0;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox0 = 4'b0011;
                4'b0001: Sbox0 = 4'b1000;
                4'b0010: Sbox0 = 4'b1111;
                4'b0011: Sbox0 = 4'b0001;
                4'b0100: Sbox0 = 4'b1010;
                4'b0101: Sbox0 = 4'b0110;
                4'b0110: Sbox0 = 4'b0101;
                4'b0111: Sbox0 = 4'b1011;
                4'b1000: Sbox0 = 4'b1110;
                4'b1001: Sbox0 = 4'b1101;
                4'b1010: Sbox0 = 4'b0100;
                4'b1011: Sbox0 = 4'b0010;
                4'b1100: Sbox0 = 4'b0111;
                4'b1101: Sbox0 = 4'b0000;
                4'b1110: Sbox0 = 4'b1001;
                4'b1111: Sbox0 = 4'b1100;
                default: Sbox0 = 4'b0000;
            endcase
        end
    endfunction

    // 15 12 2 7 9 0 5 10 1 11 14 8 6 13 3 4
    function [3:0] Sbox1;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox1 = 4'b1101;
                4'b0001: Sbox1 = 4'b1000;
                4'b0010: Sbox1 = 4'b0010;
                4'b0011: Sbox1 = 4'b0111;
                4'b0100: Sbox1 = 4'b1001;
                4'b0101: Sbox1 = 4'b0000;
                4'b0110: Sbox1 = 4'b0101;
                4'b0111: Sbox1 = 4'b1010;
                4'b1000: Sbox1 = 4'b0001;
                4'b1001: Sbox1 = 4'b1011;
                4'b1010: Sbox1 = 4'b1100;
                4'b1011: Sbox1 = 4'b1000;
                4'b1100: Sbox1 = 4'b0110;
                4'b1101: Sbox1 = 4'b1101;
                4'b1110: Sbox1 = 4'b0011;
                4'b1111: Sbox1 = 4'b0100;
                default: Sbox1 = 4'b0000;
            endcase
        end
    endfunction

    // 8 6 7 9 3 12 10 15 13 1 14 4 0 11 5 2
    function [3:0] Sbox2;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox2 = 4'b1000;
                4'b0001: Sbox2 = 4'b0110;
                4'b0010: Sbox2 = 4'b0111;
                4'b0011: Sbox2 = 4'b1001;
                4'b0100: Sbox2 = 4'b0011;
                4'b0101: Sbox2 = 4'b1100;
                4'b0110: Sbox2 = 4'b1010;
                4'b0111: Sbox2 = 4'b1111;
                4'b1000: Sbox2 = 4'b1101;
                4'b1001: Sbox2 = 4'b0001;
                4'b1010: Sbox2 = 4'b1110;
                4'b1011: Sbox2 = 4'b0100;
                4'b1100: Sbox2 = 4'b0000;
                4'b1101: Sbox2 = 4'b1011;
                4'b1110: Sbox2 = 4'b0101;
                4'b1111: Sbox2 = 4'b0010;
                default: Sbox2 = 4'b0000;                
            endcase
        end
    endfunction

    // 0 15 11 8 12 9 6 3 13 1 2 4 10 7 5 14
    function [3:0] Sbox3;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox3 = 4'b0000;
                4'b0001: Sbox3 = 4'b1111;
                4'b0010: Sbox3 = 4'b1011;
                4'b0011: Sbox3 = 4'b1000;
                4'b0100: Sbox3 = 4'b1100;
                4'b0101: Sbox3 = 4'b1001;
                4'b0110: Sbox3 = 4'b0110;
                4'b0111: Sbox3 = 4'b0011;
                4'b1000: Sbox3 = 4'b1101;
                4'b1001: Sbox3 = 4'b0001;
                4'b1010: Sbox3 = 4'b0010;
                4'b1011: Sbox3 = 4'b0100;
                4'b1100: Sbox3 = 4'b1010;
                4'b1101: Sbox3 = 4'b0111;
                4'b1110: Sbox3 = 4'b0101;
                4'b1111: Sbox3 = 4'b1110;
                default: Sbox3 = 4'b0000;
            endcase
        end
    endfunction

    // 1 15 8 3 12 0 11 6 2 5 4 10 9 14 7 13
    function [3:0] Sbox4;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox4 = 4'b0001;
                4'b0001: Sbox4 = 4'b1111;
                4'b0010: Sbox4 = 4'b1000;
                4'b0011: Sbox4 = 4'b0011;
                4'b0100: Sbox4 = 4'b1100;
                4'b0101: Sbox4 = 4'b0000;
                4'b0110: Sbox4 = 4'b1011;
                4'b0111: Sbox4 = 4'b0110;
                4'b1000: Sbox4 = 4'b0010;
                4'b1001: Sbox4 = 4'b0101;
                4'b1010: Sbox4 = 4'b0100;
                4'b1011: Sbox4 = 4'b1010;
                4'b1100: Sbox4 = 4'b1001;
                4'b1101: Sbox4 = 4'b1110;
                4'b1110: Sbox4 = 4'b0111;
                4'b1111: Sbox4 = 4'b1101;
                default: Sbox4 = 4'b0000;
            endcase
        end
    endfunction

    // 15 5 2 11 4 10 9 12 0 3 14 8 13 6 7 1
    function [3:0] Sbox5;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox5 = 4'b1111;
                4'b0001: Sbox5 = 4'b0101;
                4'b0010: Sbox5 = 4'b0010;
                4'b0011: Sbox5 = 4'b1011;
                4'b0100: Sbox5 = 4'b0100;
                4'b0101: Sbox5 = 4'b1010;
                4'b0110: Sbox5 = 4'b1001;
                4'b0111: Sbox5 = 4'b1100;
                4'b1000: Sbox5 = 4'b0000;
                4'b1001: Sbox5 = 4'b0011;
                4'b1010: Sbox5 = 4'b1110;
                4'b1011: Sbox5 = 4'b1000;
                4'b1100: Sbox5 = 4'b1101;
                4'b1101: Sbox5 = 4'b0110;
                4'b1110: Sbox5 = 4'b0111;
                4'b1111: Sbox5 = 4'b0001;
                default: Sbox5 = 4'b0000;
            endcase
        end
    endfunction

    // 7 2 12 5 8 4 6 11 14 9 1 15 13 3 10 0
    function [3:0] Sbox6;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox6 = 4'b0111;
                4'b0001: Sbox6 = 4'b0010;
                4'b0010: Sbox6 = 4'b1100;
                4'b0011: Sbox6 = 4'b0101;
                4'b0100: Sbox6 = 4'b1000;
                4'b0101: Sbox6 = 4'b0100;
                4'b0110: Sbox6 = 4'b0110;
                4'b0111: Sbox6 = 4'b1011;
                4'b1000: Sbox6 = 4'b1110;
                4'b1001: Sbox6 = 4'b1001;
                4'b1010: Sbox6 = 4'b0001;
                4'b1011: Sbox6 = 4'b1111;
                4'b1100: Sbox6 = 4'b1101;
                4'b1101: Sbox6 = 4'b0011;
                4'b1110: Sbox6 = 4'b1010;
                4'b1111: Sbox6 = 4'b0000;
                default: Sbox6 = 4'b0000;
            endcase
        end
    endfunction

    //  1 13 15 0 14 8 2 11 7 4 12 10 9 3 5 6
    function [3:0] Sbox7;
        input [3:0] data_in;
        begin
            case (data_in)
                4'b0000: Sbox7 = 4'b0001;
                4'b0001: Sbox7 = 4'b1101;
                4'b0010: Sbox7 = 4'b1111;
                4'b0011: Sbox7 = 4'b0000;
                4'b0100: Sbox7 = 4'b1110;
                4'b0101: Sbox7 = 4'b1000;
                4'b0110: Sbox7 = 4'b0010;
                4'b0111: Sbox7 = 4'b1011;
                4'b1000: Sbox7 = 4'b0111;
                4'b1001: Sbox7 = 4'b0100;
                4'b1010: Sbox7 = 4'b1100;
                4'b1011: Sbox7 = 4'b1010;
                4'b1100: Sbox7 = 4'b1001;
                4'b1101: Sbox7 = 4'b0011;
                4'b1110: Sbox7 = 4'b0101;
                4'b1111: Sbox7 = 4'b0110;
                default: Sbox7 = 4'b0000;
            endcase
        end
    endfunction

endmodule
